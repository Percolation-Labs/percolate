name: Publish Release

on:
  push:
    tags:
      - '*.*.*'  # Trigger only on semantic version tags

jobs:
  publish:
    name: Publish Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.5.1
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Configure Poetry
        run: |
          poetry config virtualenvs.create true --local
          poetry config virtualenvs.in-project true --local

      - name: Install Dependencies
        working-directory: clients/python/percolate
        run: |
          poetry install --no-interaction --no-ansi

      - name: Extract Version from Git Tag
        id: extract_version
        run: |
          TAG=${GITHUB_REF#refs/tags/}  # Get the tag (e.g., '1.2.3')
          echo "version=$TAG" >> $GITHUB_ENV  # Save the version to an environment variable
          echo "version=$TAG" >> $GITHUB_OUTPUT  # Also store in outputs for later use
      #git tag is the SoT for the version and we write it on to the toml file
      - name: Sync Version to pyproject.toml
        working-directory: clients/python/percolate
        run: |
          VERSION=${{ env.version }}
          poetry run python scripts/update_version.py "$VERSION"
        shell: bash
      #commit back to main in CI
      - name: Commit and Push Version Update to pyproject.toml
        working-directory: clients/python/percolate
        run: |
          git checkout $GITHUB_REF
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add pyproject.toml __version__
          git commit -m "Update version to ${{ env.version }}"
          git push --no-tags https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/Percolation-Labs/percolate HEAD:${GITHUB_REF}
        env:
          version: ${{ env.version }}
      - name: Run Tests (excluding slow)
        working-directory: clients/python/percolate
        run: |
          poetry run pytest -m "not slow"
      - name: Build Package
        working-directory: clients/python/percolate
        run: |
          poetry build
      - name: Publish to PyPI
        working-directory: clients/python/percolate
        env:
          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_TOKEN }}
        run: |
          poetry publish --username __token__ --password $POETRY_PYPI_TOKEN_PYPI
      # Setup for multi-arch docker build
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Determine if Release is Final
        id: is_final
        run: |
          if [[ "${{ steps.extract_version.outputs.version }}" =~ (alpha|beta|rc) ]]; then
            echo "final=false" >> $GITHUB_OUTPUT
          else
            echo "final=true" >> $GITHUB_OUTPUT
          fi

      - name: Build and Push Multi-Arch Docker Image
        uses: docker/build-push-action@v5
        with:
          context: clients/python/percolate
          file: clients/python/percolate/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/percolate-api:${{ steps.extract_version.outputs.version }}
            ${{ secrets.DOCKER_USERNAME }}/percolate-api${{ steps.is_final.outputs.final == 'true' && ':latest' || '' }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      # Create GitHub Release
      - name: Create GitHub Release
        working-directory: clients/python/percolate
        run: |
          TAG=${{ steps.extract_version.outputs.version }}
          gh auth login --with-token < ${{ secrets.GITHUB_TOKEN }}  # Authenticate with GitHub
          gh release create $TAG clients/python/percolate/dist/* --title "Release $TAG" --notes "Release notes for version $TAG"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
      # Set a tag as 'latest' on Docker Hub (trust the build for now)
      - name: Tag Docker Image as Latest (if Final Release)
        if: ${{ steps.is_final.outputs.final == 'true' }}
        run: |
          docker tag ${{ secrets.DOCKER_USERNAME }}/percolate-api:${{ steps.extract_version.outputs.version }} ${{ secrets.DOCKER_USERNAME }}/your-image-name:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/percolate-api:latest