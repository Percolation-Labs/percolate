"""
all the table models are added here for p8 schema
an install script for functions is in the repo
that script includes some utils for entity management
there is a script that registers entities 
- any functionality that registers entities in python should use SQL as no one should depend on the python api except to describe types
- for now the api can be used to register via python on users behalf - so for example when we create an entity we can register it via the API
"""

import uuid
from pydantic import Field
import typing
from .. import AbstractModel

class Function(AbstractModel):
    """Functions are external tools that agents can use. See field comments for context.
    Functions can be searched and used as LLM tools. 
    The function spec is derived from OpenAPI but adapted to the conventional used in LLMs
    """
         
    id: uuid.UUID | str = Field(description="A unique id in this case generated by the proxy and function name") 
    key: typing.Optional[str] = Field(description='optional key e.g operation id')
    name: str = Field(description="A friendly name that is unique within the proxy scope e.g. a single api or python library")
    verb:  typing.Optional[str] = Field(None,description= "The verb e.g. get, post etc")
    endpoint: typing.Optional[str] = Field(None, description="A callable endpoint in the case of REST")
    description: str = Field('', description="A detailed description of the function - may be more comprehensive than the one within the function spec - this is semantically searchable", 
                                 embedding_model='text-embedding-ada-002')
    function_spec: dict = Field(description="A function description that is OpenAI and based on the OpenAPI spec")
    proxy_uri: str = Field(description='a reference to an api or library namespace that qualifies the named function')
    
    
class LanguageModelApi(AbstractModel):
    """The Language model REST Apis are stored with tokens and scheme information.
    """
    
    id: uuid.UUID | str
    schema: typing.Optional[str] = Field('openai', description="In practice most LLM APIs use an openai scheme - currently `anthropic` and `google` can differ")
    completions_uri: str = Field(description="The api used for completions in chat and function calling. There may be other uris for other contexts")
    token_env_key: typing.Optional[str] = Field(None, description="Conventions are used to resolve keys from env or other services. Provide an alternative key")
    token: typing.Optional[str] = Field(None, description="It is not recommended to add tokens directly to the data but for convenience you might want to")
    

# Tables (p8)
# fields
# models
# functions
# model_cache_matrix (e.g. enum json)
# conversations
# token_usage
# Language_providers
# Tasks
# Projects
# Content (files or docs)
# Sessions
# Users
