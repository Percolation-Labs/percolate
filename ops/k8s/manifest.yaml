#by default this will but everything in the p8 namespace and create that namespace
#if not put here, then we need to configure P8_PG_HOST for the app
#in reality we should create the namespace first and add the scripts gen_sql_install_configmap and then apply the cluster manifest
##
#                 1. kubectl create namespace k8
# apiVersion: v1
# kind: Namespace
# metadata:
#   name: p8
# ---
apiVersion: v1
kind: ConfigMap
metadata:
  name: percolate-env
  namespace: p8
data:
  P8_PG_PORT: "5432"
  P8_PG_USER: "app"
  P8_PG_HOST: "percolate-rw.p8.svc.cluster.local"
---
apiVersion: postgresql.cnpg.io/v1
#see https://cloudnative-pg.io/documentation/preview/samples/cluster-example-full.yaml
kind: Cluster
metadata:
  namespace: p8
  name: percolate
spec:
  #the operator needs to use 16 as a postgres version
  imageName: percolationlabs/postgres-base:16
  #reduce instances for testing a smaller cluster
  instances: 3
  storage:
    size: 100Gi
  #if you want the super user access supply this
  #
  # 2. kubectl create secret generic p8-su-cred -n p8  --type=kubernetes.io/basic-auth  --from-literal=username=postgres  --from-literal=password="$(openssl rand -base64 32)"
  # decode with:> 
  # kubectl get secret p8-su-cred -n p8 -o jsonpath='{.data.password}' | base64 -d && echo
  #
  ###############################################
  enableSuperuserAccess: true
  superuserSecret:
    name: p8-su-cred
  ###
  #  3. add the percolate scripts as configmaps and then apply this manifest
  #to install percolate from config maps add config maps from scripts folder run:  python gen_sql_install_configmap.py --apply
  #this applies to the p8 namespace by default
  bootstrap:
    initdb:
      postInitApplicationSQLRefs:
        configMapRefs:
          - name: 00-install
            key: 00_install.sql
          - name: 01-add-functions
            key: 01_add_functions.sql
          - name: 02-create-primary
            key: 02_create_primary.sql
          - name: 03-create-secondary
            key: 03_create_secondary.sql
          - name: 10-finalize
            key: 10_finalize.sql
#make sure to set a storage class in your cloud
#for example in hetnzer kubectl apply -f https://raw.githubusercontent.com/hetznercloud/csi-driver/master/deploy/kubernetes/hcloud-csi.yml

---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: p8
  name: percolate-api
spec:
  replicas: 3
  selector:
    matchLabels:
      app: "percolate-api"
  template:
    metadata:
      labels:
        app: percolate-api
    spec:
      containers:
        - name: percolate-api
          image: percolationlabs/percolate-api
          imagePullPolicy: Always
          ports:
            - containerPort: 5008
          env:
            #load the secret from the percolate cluster
            - name: P8_PG_PASSWORD
              valueFrom:
                secretKeyRef:
                  #this is the name of the pg database and the secret corresponding
                  name: percolate-app
                  key: password
          #Environment variables loaded from ConfigMap
          envFrom:
            - configMapRef:
                name: percolate-env
          resources:
            limits:
              cpu: "500m"
              memory: "512Mi"
            requests:
              cpu: "250m"
              memory: "256Mi"
---
apiVersion: v1
kind: Service
metadata:
  name: percolate-api
  namespace: p8
spec:
  selector:
    app: percolate-api
  ports:
    - protocol: TCP
      port: 5008
      targetPort: 5008
  type: ClusterIP