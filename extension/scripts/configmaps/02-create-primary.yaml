apiVersion: v1
kind: ConfigMap
metadata:
  name: 02-create-primary
  namespace: p8
data:
  02_create_primary.sql: |
    
    -- register entity (p8.Project)------
    -- ------------------
    CREATE TABLE  IF NOT EXISTS  p8."Project" (
    name TEXT,
        id UUID PRIMARY KEY ,
        description TEXT NOT NULL,
        target_date TIMESTAMP,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        deleted_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        userid UUID
    );
    DROP TRIGGER IF EXISTS update_updated_at_trigger ON p8."Project";
    CREATE   TRIGGER update_updated_at_trigger
    BEFORE UPDATE ON p8."Project"
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();
    
            
    SELECT attach_notify_trigger_to_table('p8', 'Project');
                
    -- ------------------
    
    -- register entity (p8.Agent)------
    -- ------------------
    CREATE TABLE  IF NOT EXISTS  p8."Agent" (
    name TEXT,
        id UUID PRIMARY KEY ,
        category TEXT,
        description TEXT NOT NULL,
        spec JSON NOT NULL,
        functions JSON,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        deleted_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        userid UUID
    );
    DROP TRIGGER IF EXISTS update_updated_at_trigger ON p8."Agent";
    CREATE   TRIGGER update_updated_at_trigger
    BEFORE UPDATE ON p8."Agent"
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();
    
            
    SELECT attach_notify_trigger_to_table('p8', 'Agent');
                
    -- ------------------
    
    -- register entity (p8.ModelField)------
    -- ------------------
    CREATE TABLE  IF NOT EXISTS  p8."ModelField" (
    name TEXT,
        id UUID PRIMARY KEY ,
        entity_name TEXT NOT NULL,
        field_type TEXT NOT NULL,
        embedding_provider TEXT,
        description TEXT,
        is_key BOOLEAN,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        deleted_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        userid UUID
    );
    DROP TRIGGER IF EXISTS update_updated_at_trigger ON p8."ModelField";
    CREATE   TRIGGER update_updated_at_trigger
    BEFORE UPDATE ON p8."ModelField"
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();
    
            
    SELECT attach_notify_trigger_to_table('p8', 'ModelField');
                
    -- ------------------
    
    -- register entity (p8.LanguageModelApi)------
    -- ------------------
    CREATE TABLE  IF NOT EXISTS  p8."LanguageModelApi" (
    name TEXT,
        id UUID PRIMARY KEY ,
        model TEXT,
        scheme TEXT,
        completions_uri TEXT NOT NULL,
        token_env_key TEXT,
        token TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        deleted_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        userid UUID
    );
    DROP TRIGGER IF EXISTS update_updated_at_trigger ON p8."LanguageModelApi";
    CREATE   TRIGGER update_updated_at_trigger
    BEFORE UPDATE ON p8."LanguageModelApi"
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();
    
            
    SELECT attach_notify_trigger_to_table('p8', 'LanguageModelApi');
                
    -- ------------------
    
    -- register entity (p8.Function)------
    -- ------------------
    CREATE TABLE  IF NOT EXISTS  p8."Function" (
    name TEXT,
        id UUID PRIMARY KEY ,
        key TEXT,
        verb TEXT,
        endpoint TEXT,
        description TEXT NOT NULL,
        function_spec JSON NOT NULL,
        proxy_uri TEXT NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        deleted_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        userid UUID
    );
    DROP TRIGGER IF EXISTS update_updated_at_trigger ON p8."Function";
    CREATE   TRIGGER update_updated_at_trigger
    BEFORE UPDATE ON p8."Function"
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();
    
            
    SELECT attach_notify_trigger_to_table('p8', 'Function');
                
    -- ------------------
    
    -- register entity (p8.Session)------
    -- ------------------
    CREATE TABLE  IF NOT EXISTS  p8."Session" (
    id UUID PRIMARY KEY ,
        name TEXT,
        query TEXT,
        user_rating REAL,
        agent TEXT NOT NULL,
        parent_session_id UUID,
        thread_id TEXT,
        channel_id TEXT,
        channel_type TEXT,
        metadata JSON,
        session_completed_at TIMESTAMP,
        graph_paths TEXT[],
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        deleted_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        userid UUID
    );
    DROP TRIGGER IF EXISTS update_updated_at_trigger ON p8."Session";
    CREATE   TRIGGER update_updated_at_trigger
    BEFORE UPDATE ON p8."Session"
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();
    
            
    SELECT attach_notify_trigger_to_table('p8', 'Session');
                
    -- ------------------
    
    -- register entity (p8.AIResponse)------
    -- ------------------
    CREATE TABLE  IF NOT EXISTS  p8."AIResponse" (
    id UUID PRIMARY KEY ,
        model_name TEXT NOT NULL,
        tokens INTEGER,
        tokens_in INTEGER,
        tokens_out INTEGER,
        tokens_other INTEGER,
        session_id UUID,
        role TEXT NOT NULL,
        content TEXT NOT NULL,
        status TEXT,
        tool_calls JSON,
        tool_eval_data JSON,
        verbatim JSON,
        function_stack TEXT[],
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        deleted_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        userid UUID
    );
    DROP TRIGGER IF EXISTS update_updated_at_trigger ON p8."AIResponse";
    CREATE   TRIGGER update_updated_at_trigger
    BEFORE UPDATE ON p8."AIResponse"
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();
    
            
    SELECT attach_notify_trigger_to_table('p8', 'AIResponse');
                
    -- ------------------
    
    -- register entity (p8.ApiProxy)------
    -- ------------------
    CREATE TABLE  IF NOT EXISTS  p8."ApiProxy" (
    name TEXT,
        id UUID PRIMARY KEY ,
        proxy_uri TEXT NOT NULL,
        token TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        deleted_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        userid UUID
    );
    DROP TRIGGER IF EXISTS update_updated_at_trigger ON p8."ApiProxy";
    CREATE   TRIGGER update_updated_at_trigger
    BEFORE UPDATE ON p8."ApiProxy"
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();
    
            
    SELECT attach_notify_trigger_to_table('p8', 'ApiProxy');
                
    -- ------------------
    
    -- register entity (p8.PlanModel)------
    -- ------------------
    CREATE TABLE  IF NOT EXISTS  p8."PlanModel" (
    id UUID PRIMARY KEY ,
        name TEXT,
        plan_description TEXT NOT NULL,
        questions TEXT[],
        extra_arguments JSON,
        functions JSON,
        depends JSON,
        user_id TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        deleted_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );
    DROP TRIGGER IF EXISTS update_updated_at_trigger ON p8."PlanModel";
    CREATE   TRIGGER update_updated_at_trigger
    BEFORE UPDATE ON p8."PlanModel"
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();
    
            
    SELECT attach_notify_trigger_to_table('p8', 'PlanModel');
                
    -- ------------------
    
    -- register entity (p8.Settings)------
    -- ------------------
    CREATE TABLE  IF NOT EXISTS  p8."Settings" (
    id UUID PRIMARY KEY ,
        key TEXT,
        value TEXT NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        deleted_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        userid UUID
    );
    DROP TRIGGER IF EXISTS update_updated_at_trigger ON p8."Settings";
    CREATE   TRIGGER update_updated_at_trigger
    BEFORE UPDATE ON p8."Settings"
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();
    
            
    -- ------------------
    
    -- register entity (p8.PercolateAgent)------
    -- ------------------
    CREATE TABLE  IF NOT EXISTS  p8."PercolateAgent" (
    id UUID PRIMARY KEY ,
        name TEXT,
        category TEXT,
        content TEXT NOT NULL,
        summary TEXT,
        ordinal INTEGER NOT NULL,
        uri TEXT NOT NULL,
        metadata JSON,
        graph_paths TEXT[],
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        deleted_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        userid UUID
    );
    DROP TRIGGER IF EXISTS update_updated_at_trigger ON p8."PercolateAgent";
    CREATE   TRIGGER update_updated_at_trigger
    BEFORE UPDATE ON p8."PercolateAgent"
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();
    
            
    SELECT attach_notify_trigger_to_table('p8', 'PercolateAgent');
                
    -- ------------------
    
    -- register entity (p8.IndexAudit)------
    -- ------------------
    CREATE TABLE  IF NOT EXISTS  p8."IndexAudit" (
    id UUID PRIMARY KEY ,
        model_name TEXT NOT NULL,
        tokens INTEGER,
        tokens_in INTEGER,
        tokens_out INTEGER,
        tokens_other INTEGER,
        session_id UUID,
        metrics JSON,
        status TEXT NOT NULL,
        message TEXT,
        entity_full_name TEXT NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        deleted_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        userid UUID
    );
    DROP TRIGGER IF EXISTS update_updated_at_trigger ON p8."IndexAudit";
    CREATE   TRIGGER update_updated_at_trigger
    BEFORE UPDATE ON p8."IndexAudit"
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();
    
            
    -- ------------------
    
    -- register entity (p8.Task)------
    -- ------------------
    CREATE TABLE  IF NOT EXISTS  p8."Task" (
    name TEXT,
        id UUID PRIMARY KEY ,
        description TEXT NOT NULL,
        target_date TIMESTAMP,
        project_name TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        deleted_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        userid UUID
    );
    DROP TRIGGER IF EXISTS update_updated_at_trigger ON p8."Task";
    CREATE   TRIGGER update_updated_at_trigger
    BEFORE UPDATE ON p8."Task"
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();
    
            
    SELECT attach_notify_trigger_to_table('p8', 'Task');
                
    -- ------------------
    
    -- register entity (p8.TaskResources)------
    -- ------------------
    CREATE TABLE  IF NOT EXISTS  p8."TaskResources" (
    id UUID PRIMARY KEY ,
        resource_id UUID,
        session_id UUID,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        deleted_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        userid UUID
    );
    DROP TRIGGER IF EXISTS update_updated_at_trigger ON p8."TaskResources";
    CREATE   TRIGGER update_updated_at_trigger
    BEFORE UPDATE ON p8."TaskResources"
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();
    
            
    -- ------------------
    
    -- register entity (p8.ResearchIteration)------
    -- ------------------
    CREATE TABLE  IF NOT EXISTS  p8."ResearchIteration" (
    id UUID PRIMARY KEY ,
        iteration INTEGER NOT NULL,
        content TEXT,
        conceptual_diagram TEXT,
        question_set JSON NOT NULL,
        task_id UUID,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        deleted_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        userid UUID
    );
    DROP TRIGGER IF EXISTS update_updated_at_trigger ON p8."ResearchIteration";
    CREATE   TRIGGER update_updated_at_trigger
    BEFORE UPDATE ON p8."ResearchIteration"
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();
    
            
    SELECT attach_notify_trigger_to_table('p8', 'ResearchIteration');
                
    -- ------------------
    
    -- register entity (p8.Resources)------
    -- ------------------
    CREATE TABLE  IF NOT EXISTS  p8."Resources" (
    id UUID PRIMARY KEY ,
        name TEXT,
        category TEXT,
        content TEXT NOT NULL,
        summary TEXT,
        ordinal INTEGER NOT NULL,
        uri TEXT NOT NULL,
        metadata JSON,
        graph_paths TEXT[],
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        deleted_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        userid UUID
    );
    DROP TRIGGER IF EXISTS update_updated_at_trigger ON p8."Resources";
    CREATE   TRIGGER update_updated_at_trigger
    BEFORE UPDATE ON p8."Resources"
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();
    
            
    SELECT attach_notify_trigger_to_table('p8', 'Resources');
                
    -- ------------------
